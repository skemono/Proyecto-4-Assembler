
Gusanito.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000198  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  0800035c  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00002020  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00002020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  0800035c  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0000135c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000360  08000360  00001360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08000364  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000384  00002020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000384  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000102  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006d  00000000  00000000  00002152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000055  00000000  00000000  000021bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00002250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000089  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000344 	.word	0x08000344

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08000344 	.word	0x08000344

08000204 <__main>:
.text
    .global __main

__main:
	// Cargar la direcci贸n de RCC_AHB1ENR en r0
    ldr r0, =RCC_AHB1ENR
 8000204:	4821      	ldr	r0, [pc, #132]	@ (800028c <delay_loop+0x8>)
    // Cargar el valor en la direcci贸n encontrada en r0 en r1
    ldr r1, [r0]
 8000206:	6801      	ldr	r1, [r0, #0]
    // Habilitar reloj para GPIOA y GPIOC
    orr r1, #GPIOA_EN
 8000208:	f041 0101 	orr.w	r1, r1, #1
    orr r1, #GPIOC_EN
 800020c:	f041 0104 	orr.w	r1, r1, #4
    // Almacenar el contenido en r1 en la direcci贸n encontrada en r0
    str r1, [r0]
 8000210:	6001      	str	r1, [r0, #0]

    ldr r0, =GPIOA_MODER          // Load address of GPIOA_MODER into r0
 8000212:	481f      	ldr	r0, [pc, #124]	@ (8000290 <delay_loop+0xc>)
    ldr r1, [r0]                  // Load the current value of GPIOA_MODER into r1
 8000214:	6801      	ldr	r1, [r0, #0]
    bic r1, r1, #(0x3 << 0)       // Clear bits 1:0 (PA0) to set as output
 8000216:	f021 0103 	bic.w	r1, r1, #3
    bic r1, r1, #(0x3 << 2)       // Clear bits 3:2 (PA1) to set as output
 800021a:	f021 010c 	bic.w	r1, r1, #12
    bic r1, r1, #(0x3 << 8)       // Clear bits 9:8 (PA4) to set as output
 800021e:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
    bic r1, r1, #(0x3 << 12)      // Clear bits 13:12 (PA6) to set as output
 8000222:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
    bic r1, r1, #(0x3 << 14)      // Clear bits 15:14 (PA7) to set as output
 8000226:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
    bic r1, r1, #(0x3 << 16)      // Clear bits 17:16 (PA8) to set as output
 800022a:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
    bic r1, r1, #(0x3 << 18)      // Clear bits 19:18 (PA9) to set as output
 800022e:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
    orr r1, r1, #(0x1 << 0)       // Set PA0 as output (01)
 8000232:	f041 0101 	orr.w	r1, r1, #1
    orr r1, r1, #(0x1 << 2)       // Set PA1 as output (01)
 8000236:	f041 0104 	orr.w	r1, r1, #4
    orr r1, r1, #(0x1 << 8)       // Set PA4 as output (01)
 800023a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
    orr r1, r1, #(0x1 << 12)      // Set PA6 as output (01)
 800023e:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
    orr r1, r1, #(0x1 << 14)      // Set PA7 as output (01)
 8000242:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
    orr r1, r1, #(0x1 << 16)      // Set PA8 as output (01)
 8000246:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
    orr r1, r1, #(0x1 << 18)      // Set PA9 as output (01)
 800024a:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    str r1, [r0]                  // Write back the updated value to GPIOA_MODER
 800024e:	6001      	str	r1, [r0, #0]

    ldr r0, =GPIOC_MODER          // Load address of GPIOC_MODER into r0
 8000250:	4810      	ldr	r0, [pc, #64]	@ (8000294 <delay_loop+0x10>)
    ldr r1, [r0]                  // Load the current value of GPIOC_MODER into r1
 8000252:	6801      	ldr	r1, [r0, #0]
    bic R1, R1, #(3 << 26)           // Clear bits 27:26 (PC13) to set as input (00)
 8000254:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
    str r1, [r0]                  // Write back the updated value to GPIOC_MODER
 8000258:	6001      	str	r1, [r0, #0]

    mov r4, #0                    // Initialize r4 (index for gusanito array) to 0
 800025a:	f04f 0400 	mov.w	r4, #0

    b awaitbton
 800025e:	e7ff      	b.n	8000260 <awaitbton>

08000260 <awaitbton>:

awaitbton:
	// Leer el estado del bot贸n
    ldr r0, =GPIOC_IDR
 8000260:	480d      	ldr	r0, [pc, #52]	@ (8000298 <delay_loop+0x14>)
    ldr r1, [r0]
 8000262:	6801      	ldr	r1, [r0, #0]
    tst r1, #(1 << 13)
 8000264:	f411 5f00 	tst.w	r1, #8192	@ 0x2000
    beq loop
 8000268:	d000      	beq.n	800026c <loop>
    b awaitbton
 800026a:	e7f9      	b.n	8000260 <awaitbton>

0800026c <loop>:

loop:
    ldr r0, =gusanito             // Load address of gusanito into r0
 800026c:	480b      	ldr	r0, [pc, #44]	@ (800029c <delay_loop+0x18>)
    ldr r1, [r0, r4]             // Load byte from gusanito at index r4 into r1
 800026e:	5901      	ldr	r1, [r0, r4]

    ldr r0, =GPIOA_ODR            // Load address of GPIOA_ODR into r0
 8000270:	480b      	ldr	r0, [pc, #44]	@ (80002a0 <delay_loop+0x1c>)
    str r1, [r0]                  // Write the value from r1 to GPIOA_ODR (update LEDs)
 8000272:	6001      	str	r1, [r0, #0]

    add r4, #4                    // Increment r4 (index for gusanito)
 8000274:	f104 0404 	add.w	r4, r4, #4
    cmp r4, #32                    // Compare r4 with 8
 8000278:	2c20      	cmp	r4, #32
    bne delay                     // If r4 is not 8, branch to delay
 800027a:	d101      	bne.n	8000280 <delay>
    mov r4, #0                    // If r4 is 8, reset it to 0
 800027c:	f04f 0400 	mov.w	r4, #0

08000280 <delay>:

delay:
    ldr r5, =5000000                // Load 1500 into r5 (delay counter)
 8000280:	4d08      	ldr	r5, [pc, #32]	@ (80002a4 <delay_loop+0x20>)
    b delay_loop
 8000282:	e7ff      	b.n	8000284 <delay_loop>

08000284 <delay_loop>:

delay_loop:
    subs r5, #1                   // Subtract 1 from r5
 8000284:	3d01      	subs	r5, #1
    bne delay_loop                // If r5 is not 0, branch to delay_loop
 8000286:	d1fd      	bne.n	8000284 <delay_loop>

    b loop                        // Branch to loop (repeat process)
 8000288:	e7f0      	b.n	800026c <loop>
 800028a:	0000      	.short	0x0000
    ldr r0, =RCC_AHB1ENR
 800028c:	40023830 	.word	0x40023830
    ldr r0, =GPIOA_MODER          // Load address of GPIOA_MODER into r0
 8000290:	40020000 	.word	0x40020000
    ldr r0, =GPIOC_MODER          // Load address of GPIOC_MODER into r0
 8000294:	40020800 	.word	0x40020800
    ldr r0, =GPIOC_IDR
 8000298:	40020810 	.word	0x40020810
    ldr r0, =gusanito             // Load address of gusanito into r0
 800029c:	20000000 	.word	0x20000000
    ldr r0, =GPIOA_ODR            // Load address of GPIOA_ODR into r0
 80002a0:	40020014 	.word	0x40020014
    ldr r5, =5000000                // Load 1500 into r5 (delay counter)
 80002a4:	004c4b40 	.word	0x004c4b40

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	@ (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl __main
 80002da:	f7ff ff93 	bl	8000204 <__main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80002f4:	2000003c 	.word	0x2000003c

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000334 <__libc_init_array+0x38>)
 8000300:	4c0d      	ldr	r4, [pc, #52]	@ (8000338 <__libc_init_array+0x3c>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	2600      	movs	r6, #0
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	4d0b      	ldr	r5, [pc, #44]	@ (800033c <__libc_init_array+0x40>)
 800030e:	4c0c      	ldr	r4, [pc, #48]	@ (8000340 <__libc_init_array+0x44>)
 8000310:	f000 f818 	bl	8000344 <_init>
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	2600      	movs	r6, #0
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
