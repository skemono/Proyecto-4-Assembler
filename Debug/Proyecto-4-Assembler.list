
Proyecto-4-Assembler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  0800038c  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00002020  2**0
                  CONTENTS
  4 .ARM          00000000  0800038c  0800038c  00002020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800038c  0800038c  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000390  08000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08000394  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  080003b4  00002020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080003b4  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000119  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000c0  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000055  00000000  00000000  00002229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000038  00000000  00000000  0000227e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  000022b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000000dc  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000019  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  000023f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000374 	.word	0x08000374

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08000374 	.word	0x08000374

08000204 <__main>:

.text
    .global __main

__main:
    ldr r0, =RCC_AHB1ENR            // Cargar la dirección de RCC_AHB1ENR en r0
 8000204:	482b      	ldr	r0, [pc, #172]	@ (80002b4 <reiniciar+0x10>)
    ldr r1, [r0]                    // Cargar el valor en la dirección encontrada en r0 en r1
 8000206:	6801      	ldr	r1, [r0, #0]
    orr r1, #GPIOA_EN               // Habilitar reloj para GPIOA
 8000208:	f041 0101 	orr.w	r1, r1, #1
    orr r1, #GPIOC_EN               // Habilitar reloj para GPIOC
 800020c:	f041 0104 	orr.w	r1, r1, #4
    str r1, [r0]                    // Almacenar el contenido en r1 en la dirección encontrada en r0
 8000210:	6001      	str	r1, [r0, #0]

    ldr r0, =GPIOA_MODER            // Cargar la dirección de GPIOA_MODER en r0
 8000212:	4829      	ldr	r0, [pc, #164]	@ (80002b8 <reiniciar+0x14>)
    ldr r1, [r0]                    // Cargar el valor actual de GPIOA_MODER en r1
 8000214:	6801      	ldr	r1, [r0, #0]
    bic r1, r1, #(0x3 << 0)         // Limpiar bits 1:0 (PA0) para configurar como salida
 8000216:	f021 0103 	bic.w	r1, r1, #3
    bic r1, r1, #(0x3 << 2)         // Limpiar bits 3:2 (PA1) para configurar como salida
 800021a:	f021 010c 	bic.w	r1, r1, #12
    bic r1, r1, #(0x3 << 8)         // Limpiar bits 9:8 (PA4) para configurar como salida
 800021e:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
    bic r1, r1, #(0x3 << 12)        // Limpiar bits 13:12 (PA6) para configurar como salida
 8000222:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
    bic r1, r1, #(0x3 << 14)        // Limpiar bits 15:14 (PA7) para configurar como salida
 8000226:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
    bic r1, r1, #(0x3 << 16)        // Limpiar bits 17:16 (PA8) para configurar como salida
 800022a:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
    bic r1, r1, #(0x3 << 18)        // Limpiar bits 19:18 (PA9) para configurar como salida
 800022e:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
    orr r1, r1, #(0x1 << 0)         // Configurar PA0 como salida (01)
 8000232:	f041 0101 	orr.w	r1, r1, #1
    orr r1, r1, #(0x1 << 2)         // Configurar PA1 como salida (01)
 8000236:	f041 0104 	orr.w	r1, r1, #4
    orr r1, r1, #(0x1 << 8)         // Configurar PA4 como salida (01)
 800023a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
    orr r1, r1, #(0x1 << 12)        // Configurar PA6 como salida (01)
 800023e:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
    orr r1, r1, #(0x1 << 14)        // Configurar PA7 como salida (01)
 8000242:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
    orr r1, r1, #(0x1 << 16)        // Configurar PA8 como salida (01)
 8000246:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
    orr r1, r1, #(0x1 << 18)        // Configurar PA9 como salida (01)
 800024a:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    str r1, [r0]                    // Escribir el valor actualizado a GPIOA_MODER
 800024e:	6001      	str	r1, [r0, #0]

    ldr r0, =GPIOC_MODER            // Cargar la dirección de GPIOC_MODER en r0
 8000250:	481a      	ldr	r0, [pc, #104]	@ (80002bc <reiniciar+0x18>)
    ldr r1, [r0]                    // Cargar el valor actual de GPIOC_MODER en r1
 8000252:	6801      	ldr	r1, [r0, #0]
    bic r1, r1, #(3 << 2)           // Limpiar bits 3:2 (PC1) para configurar como entrada (00)
 8000254:	f021 010c 	bic.w	r1, r1, #12
    str r1, [r0]                    // Escribir el valor actualizado a GPIOC_MODER
 8000258:	6001      	str	r1, [r0, #0]

    mov r4, #0                      // Inicializar r4 (índice para el arreglo gusanito) en 0
 800025a:	f04f 0400 	mov.w	r4, #0

    b awaitbton                     // Saltar a la etiqueta awaitbton
 800025e:	e7ff      	b.n	8000260 <awaitbton>

08000260 <awaitbton>:

awaitbton:
    ldr r0, =GPIOC_IDR              // Cargar la dirección de GPIOC_IDR en r0
 8000260:	4817      	ldr	r0, [pc, #92]	@ (80002c0 <reiniciar+0x1c>)
    ldr r1, [r0]                    // Cargar el valor de GPIOC_IDR en r1
 8000262:	6801      	ldr	r1, [r0, #0]
    tst r1, #(1 << 1)               // Probar el bit 1 (PC1) del valor leído
 8000264:	f011 0f02 	tst.w	r1, #2
    bne btonDebounce                // Si el bit está activo, saltar a btonDebounce
 8000268:	d117      	bne.n	800029a <btonDebounce>
    b awaitbton                     // Si no, repetir awaitbton
 800026a:	e7f9      	b.n	8000260 <awaitbton>

0800026c <loop>:

loop:
    ldr r0, =gusanito               // Cargar la dirección de gusanito en r0
 800026c:	4815      	ldr	r0, [pc, #84]	@ (80002c4 <reiniciar+0x20>)
    ldr r1, [r0, r4]                // Cargar el valor del arreglo gusanito en el índice r4 en r1
 800026e:	5901      	ldr	r1, [r0, r4]

    ldr r0, =GPIOA_ODR              // Cargar la dirección de GPIOA_ODR en r0
 8000270:	4815      	ldr	r0, [pc, #84]	@ (80002c8 <reiniciar+0x24>)
    str r1, [r0]                    // Escribir el valor de r1 en GPIOA_ODR (actualizar LEDs)
 8000272:	6001      	str	r1, [r0, #0]

    add r4, #4                      // Incrementar r4 (índice para gusanito)
 8000274:	f104 0404 	add.w	r4, r4, #4
    cmp r4, #32                     // Comparar r4 con 32
 8000278:	2c20      	cmp	r4, #32
    bne delay                       // Si r4 no es 32, saltar a delay
 800027a:	d101      	bne.n	8000280 <delay>
    mov r4, #0                      // Si r4 es 32, reiniciarlo a 0
 800027c:	f04f 0400 	mov.w	r4, #0

08000280 <delay>:

delay:
    ldr r5, =2000000                // Cargar 2000000 en r5 (contador de retardo)
 8000280:	4d12      	ldr	r5, [pc, #72]	@ (80002cc <reiniciar+0x28>)
    b delay_loop                    // Saltar a la etiqueta delay_loop
 8000282:	e7ff      	b.n	8000284 <delay_loop>

08000284 <delay_loop>:

delay_loop:
    ldr r0, =GPIOC_IDR              // Cargar la dirección de GPIOC_IDR en r0
 8000284:	480e      	ldr	r0, [pc, #56]	@ (80002c0 <reiniciar+0x1c>)
    ldr r1, [r0]                    // Cargar el valor de GPIOC_IDR en r1
 8000286:	6801      	ldr	r1, [r0, #0]
    tst r1, #(1 << 1)               // Probar el bit 1 (PC1) del valor leído
 8000288:	f011 0f02 	tst.w	r1, #2
    bne reiniciar                   // Si el bit está activo, saltar a reiniciar
 800028c:	d10a      	bne.n	80002a4 <reiniciar>

    subs r5, #1                     // Restar 1 de r5
 800028e:	3d01      	subs	r5, #1
    bne delay_loop                  // Si r5 no es 0, saltar a delay_loop
 8000290:	d1f8      	bne.n	8000284 <delay_loop>

    b loop                          // Saltar a la etiqueta loop (repetir proceso)
 8000292:	e7eb      	b.n	800026c <loop>

08000294 <debounceDelay>:



debounceDelay:
    subs r5, #1                     // Restar 1 de r5
 8000294:	3d01      	subs	r5, #1
    bne debounceDelay               // Si r5 no es 0, saltar a debounceDelay
 8000296:	d1fd      	bne.n	8000294 <debounceDelay>

    b loop                          // Saltar a la etiqueta loop
 8000298:	e7e8      	b.n	800026c <loop>

0800029a <btonDebounce>:

btonDebounce:
    ldr r5, =9000000                // Cargar 9000000 en r5 (contador de retardo)
 800029a:	4d0d      	ldr	r5, [pc, #52]	@ (80002d0 <reiniciar+0x2c>)
    b debounceDelay                 // Saltar a debounceDelay
 800029c:	e7fa      	b.n	8000294 <debounceDelay>

0800029e <reiniciarDelay>:

reiniciarDelay:
    subs r5, #1                     // Restar 1 de r5
 800029e:	3d01      	subs	r5, #1
    bne reiniciarDelay              // Si r5 no es 0, saltar a reiniciarDelay
 80002a0:	d1fd      	bne.n	800029e <reiniciarDelay>

    b awaitbton                     // Saltar a la etiqueta awaitbton
 80002a2:	e7dd      	b.n	8000260 <awaitbton>

080002a4 <reiniciar>:

reiniciar:
    ldr r0, =GPIOA_ODR              // Cargar la dirección de GPIOA_ODR en r0
 80002a4:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <reiniciar+0x24>)
    mov r1, #0                      // Cargar 0 en r1
 80002a6:	f04f 0100 	mov.w	r1, #0
    str r1, [r0]                    // Escribir 0 en GPIOA_ODR para apagar todos los LEDs
 80002aa:	6001      	str	r1, [r0, #0]
    ldr r5, =5000000                // Cargar 5000000 en r5 (contador de retardo)
 80002ac:	4d09      	ldr	r5, [pc, #36]	@ (80002d4 <reiniciar+0x30>)
    mov r4, #0                      // Reiniciar r4 a 0
 80002ae:	f04f 0400 	mov.w	r4, #0
    b reiniciarDelay                // Saltar a reiniciarDelay
 80002b2:	e7f4      	b.n	800029e <reiniciarDelay>
    ldr r0, =RCC_AHB1ENR            // Cargar la dirección de RCC_AHB1ENR en r0
 80002b4:	40023830 	.word	0x40023830
    ldr r0, =GPIOA_MODER            // Cargar la dirección de GPIOA_MODER en r0
 80002b8:	40020000 	.word	0x40020000
    ldr r0, =GPIOC_MODER            // Cargar la dirección de GPIOC_MODER en r0
 80002bc:	40020800 	.word	0x40020800
    ldr r0, =GPIOC_IDR              // Cargar la dirección de GPIOC_IDR en r0
 80002c0:	40020810 	.word	0x40020810
    ldr r0, =gusanito               // Cargar la dirección de gusanito en r0
 80002c4:	20000000 	.word	0x20000000
    ldr r0, =GPIOA_ODR              // Cargar la dirección de GPIOA_ODR en r0
 80002c8:	40020014 	.word	0x40020014
    ldr r5, =2000000                // Cargar 2000000 en r5 (contador de retardo)
 80002cc:	001e8480 	.word	0x001e8480
    ldr r5, =9000000                // Cargar 9000000 en r5 (contador de retardo)
 80002d0:	00895440 	.word	0x00895440
    ldr r5, =5000000                // Cargar 5000000 en r5 (contador de retardo)
 80002d4:	004c4b40 	.word	0x004c4b40

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	@ (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	@ (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	@ (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	@ (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 f811 	bl	800032c <__libc_init_array>
/* Call the application's entry point.*/
  bl __main
 800030a:	f7ff ff7b 	bl	8000204 <__main>

0800030e <LoopForever>:

LoopForever:
  b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800031c:	08000394 	.word	0x08000394
  ldr r2, =_sbss
 8000320:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000324:	2000003c 	.word	0x2000003c

08000328 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC_IRQHandler>
	...

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	4d0d      	ldr	r5, [pc, #52]	@ (8000364 <__libc_init_array+0x38>)
 8000330:	4c0d      	ldr	r4, [pc, #52]	@ (8000368 <__libc_init_array+0x3c>)
 8000332:	1b64      	subs	r4, r4, r5
 8000334:	10a4      	asrs	r4, r4, #2
 8000336:	2600      	movs	r6, #0
 8000338:	42a6      	cmp	r6, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	4d0b      	ldr	r5, [pc, #44]	@ (800036c <__libc_init_array+0x40>)
 800033e:	4c0c      	ldr	r4, [pc, #48]	@ (8000370 <__libc_init_array+0x44>)
 8000340:	f000 f818 	bl	8000374 <_init>
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	10a4      	asrs	r4, r4, #2
 8000348:	2600      	movs	r6, #0
 800034a:	42a6      	cmp	r6, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f855 3b04 	ldr.w	r3, [r5], #4
 8000354:	4798      	blx	r3
 8000356:	3601      	adds	r6, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	4798      	blx	r3
 8000360:	3601      	adds	r6, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
